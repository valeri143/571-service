{"version":3,"file":"static/js/445.837c849d.chunk.js","mappings":"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","sources":["components/Error.jsx","components/SectionForm/SectionForm.jsx","images/checkbox.svg","components/SectionForm/SectionForm.styled.jsx","helpers/phoneUaInput.js"],"sourcesContent":["export const Error = ({ children }) => {\n  return (\n    <div\n      style={{\n        color: 'red',\n        fontSize: 14,\n        textAlign: 'center',\n        marginTop: '-20px',\n        marginBottom: '10px',\n      }}\n    >\n      {children.toLowerCase()}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Formik, ErrorMessage, Form } from 'formik';\nimport { motion } from 'framer-motion';\nimport * as yup from 'yup';\nimport { formatPhoneNumber } from 'helpers/phoneUaInput';\nimport { Error } from 'components/Error';\nimport {\n  StyledCircleDiv,\n  StyledContainer,\n} from 'components/SectionServices/SectionServices.styled';\nimport { animation } from '../Hero/Hero';\nimport { animationRight } from '../SectionCertifications/SectionCertifications';\nimport {\n  StyledBackGroundImage,\n  StyledBgImg,\n  StyledDiv,\n  StyledH2,\n  StyledH3,\n  StyledFormDiv,\n  StyledLabel,\n  StyledField,\n  StyledSubmitDiv,\n  StyledButton,\n  StyledBorder,\n  StyledBorderNumber,\n  StyledSvg,\n  StyledCheckboxLabel,\n  StyledCheckboxField,\n  StyledP,\n  StyledLink,\n  StyledLineDiv,\n  StyledFlexDiv,\n  StyledSubmittedButton,\n  StyledSubmittedSpan,\n  StyledSubmittedP,\n  StyledBgDesktopImg,\n  StyledFlexFormDesktopDiv,\n} from './SectionForm.styled';\nimport bg from '../../images/mobile/bg-circle.png';\nimport bgD from '../../images/desktop/bg-circle-right.png';\nimport sprite from '../../images/sprite.svg';\n\nconst schema = yup.object().shape({\n  name: yup.string().required('Please enter your name'),\n  number: yup\n    .string()\n    .min(10, 'Must be more than 10 characters')\n    .required(\"Please enter the phone's number\"),\n  checkbox: yup.boolean().required('Please check the checkbox to continue'),\n});\n\nconst SectionForm = () => {\n  const [t] = useTranslation();\n  const [formSubmitted, setFormSubmitted] = useState(false);\n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    setFormSubmitted(true);\n    // console.log(name, number);\n    // sending data\n    resetForm();\n  };\n\n  return (\n    <motion.section\n      initial={window.innerWidth >= 1512 ? 'hidden' : 'visible'}\n      whileInView=\"visible\"\n      viewport={{ amount: 0.7, once: true }}\n    >\n      <StyledBackGroundImage>\n        <StyledContainer>\n          <StyledBgImg src={bg} alt=\"background-circle\" loading=\"lazy\" />\n          <StyledBgDesktopImg\n            variants={animation}\n            as={motion.img}\n            src={bgD}\n            alt=\"background-circle\"\n            loading=\"lazy\"\n          />\n          <StyledDiv>\n            <StyledCircleDiv></StyledCircleDiv>\n            <StyledH2>{t('form.h2')}</StyledH2>\n          </StyledDiv>\n          <StyledH3>{t('form.h3')}</StyledH3>\n          <StyledFlexFormDesktopDiv>\n            <motion.div variants={animation}>\n              <Formik\n                initialValues={{ name: '', number: '', checkbox: false }}\n                validationSchema={schema}\n                onSubmit={handleSubmit}\n              >\n                {({ setFieldValue }) => (\n                  <Form>\n                    <StyledFormDiv>\n                      <StyledLabel htmlFor=\"name\">\n                        {t('form.labels.0')}{' '}\n                      </StyledLabel>\n                      <StyledBorder></StyledBorder>\n                      <StyledSvg width=\"22\" height=\"22\">\n                        <use href={`${sprite}#icon-address-book`}></use>\n                      </StyledSvg>\n                      <StyledField\n                        name=\"name\"\n                        id=\"name\"\n                        placeholder={t('form.placeholderName')}\n                        autoComplete=\"off\"\n                      />\n                      <ErrorMessage name=\"name\" component={Error} />\n                    </StyledFormDiv>\n\n                    <StyledFormDiv>\n                      <StyledLabel htmlFor=\"number\">\n                        {t('form.labels.1')}\n                      </StyledLabel>\n                      <StyledBorderNumber></StyledBorderNumber>\n                      <StyledSvg width=\"22\" height=\"22\">\n                        <use href={`${sprite}#icon-call-yellow-outline`}></use>\n                      </StyledSvg>\n                      <StyledField\n                        name=\"number\"\n                        id=\"number\"\n                        type=\"tel\"\n                        placeholder=\"+380 XXX XX XX XX\"\n                        autoComplete=\"off\"\n                        onChange={e => {\n                          const formattedNumber = formatPhoneNumber(\n                            e.target.value\n                          );\n                          setFieldValue('number', formattedNumber);\n                        }}\n                        onFocus={e => {\n                          if (!e.target.value) {\n                            setFieldValue('number', '+380 ');\n                          }\n                        }}\n                      />\n                      <ErrorMessage name=\"number\" component={Error} />\n                    </StyledFormDiv>\n\n                    <StyledSubmitDiv>\n                      <StyledCheckboxLabel>\n                        <StyledCheckboxField\n                          name=\"checkbox\"\n                          type=\"checkbox\"\n                          required\n                        />\n                        <ErrorMessage name=\"checkbox\" component={Error} />\n                        {t('form.checkboxText')}\n                      </StyledCheckboxLabel>\n                      {!formSubmitted && (\n                        <StyledButton type=\"submit\">\n                          {t('header.buttonText')}\n                        </StyledButton>\n                      )}\n                      {formSubmitted && (\n                        <StyledSubmittedButton>\n                          <StyledSubmittedP>\n                            <StyledSubmittedSpan>\n                              {t('form.buttonSubmittedText.0')}\n                            </StyledSubmittedSpan>\n                            {t('form.buttonSubmittedText.1')}\n                          </StyledSubmittedP>\n                        </StyledSubmittedButton>\n                      )}\n                    </StyledSubmitDiv>\n                  </Form>\n                )}\n              </Formik>\n            </motion.div>\n            <StyledFlexDiv as={motion.div} variants={animationRight}>\n              <StyledLineDiv></StyledLineDiv>\n              <div>\n                <StyledP>{t('form.p')}</StyledP>\n                <StyledLink href=\"tel:050 936 34 00\">050 936 34 00</StyledLink>\n              </div>\n            </StyledFlexDiv>\n          </StyledFlexFormDesktopDiv>\n        </StyledContainer>\n      </StyledBackGroundImage>\n    </motion.section>\n  );\n};\n\nexport default SectionForm;\n","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgCheckbox(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 12,\n    height: 8,\n    viewBox: \"0 0 12 8\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector 29\",\n    d: \"M1 4L4.33333 7L11 1\",\n    stroke: \"#FDC70D\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgCheckbox);\nexport default __webpack_public_path__ + \"static/media/checkbox.1f4f874464e9a5df5d503a994299a7d7.svg\";\nexport { ForwardRef as ReactComponent };","import styled, { keyframes } from 'styled-components';\nimport { Field } from 'formik';\nimport bg1x from '../../images/mobile/backgrounds/form-background@1x-min.jpg';\nimport bg2x from '../../images/mobile/backgrounds/form-background@2x-min.jpg';\nimport bg1xD from '../../images/desktop/backgrounds/form-background@1x-min.jpg';\nimport bg2xD from '../../images/desktop/backgrounds/form-background@2x-min.jpg';\nimport check from '../../images/checkbox.svg';\n\nexport const StyledBackGroundImage = styled.div`\n  background-image: url(${bg1x});\n  background-repeat: no-repeat;\n  background-size: cover;\n  height: 645px;\n  @media (min-device-pixel-ratio: 2),\n    (min-resolution: 192dpi),\n    (min-resolution: 2dppx) {\n    background-image: url(${bg2x});\n  }\n  @media screen and (min-width: 1512px) {\n    background: url(${bg1xD}),\n      linear-gradient(90deg, #242424 0%, rgba(36, 36, 36, 0) 100%),\n      var(--primary-color);\n    background-repeat: no-repeat;\n    background-size: contain;\n    @media (min-device-pixel-ratio: 2),\n      (min-resolution: 192dpi),\n      (min-resolution: 2dppx) {\n      background-image: url(${bg2xD});\n    }\n  }\n`;\n\nexport const StyledBgImg = styled.img`\n  position: absolute;\n  right: 0;\n  top: -240px;\n  @media (min-width: 1512px) {\n    display: none;\n  }\n`;\n\nexport const StyledBgDesktopImg = styled.img`\n  display: none;\n  position: absolute;\n  right: 0;\n  bottom: 350px;\n  @media (min-width: 1512px) {\n    display: block;\n  }\n`;\n\nexport const StyledDiv = styled.div`\n  position: absolute;\n  z-index: 2;\n  top: 49px;\n  right: 38px;\n  display: flex;\n  flex-direction: row-reverse;\n  align-items: center;\n  gap: 10px;\n  @media screen and (min-width: 1512px) {\n    right: 168px;\n    top: unset;\n  }\n`;\n\nexport const StyledH2 = styled.h2`\n  color: rgba(255, 255, 255, 0.8);\n  text-align: right;\n  font-size: 12px;\n  line-height: 1.5;\n  opacity: 0.5;\n`;\n\nexport const StyledH3 = styled.h3`\n  width: 248px;\n  color: var(--light-color);\n  text-align: center;\n  font-size: 24px;\n  font-weight: 500;\n  line-height: 1.2;\n  text-transform: uppercase;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 32px;\n  @media screen and (min-width: 1512px) {\n    font-size: 38px;\n    text-align: left;\n    width: 395px;\n    margin-right: 200px;\n  }\n`;\n\nexport const StyledFlexFormDesktopDiv = styled.div`\n  @media screen and (min-width: 1512px) {\n    display: flex;\n    justify-content: flex-end;\n    gap: 51px;\n    align-items: flex-end;\n  }\n`;\n\nexport const StyledFormDiv = styled.div`\n  position: relative;\n  @media screen and (min-width: 768px) {\n    width: 360px;\n    margin-left: auto;\n    margin-right: auto;\n  }\n`;\n\nexport const StyledField = styled(Field)`\n  max-width: 270px;\n  height: 60px;\n  border-radius: 500px;\n  border: 1px solid #dadada;\n  padding-left: 53px;\n  padding-right: 5px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 32px;\n  display: block;\n  background: transparent;\n  color: var(--grey-color);\n  font-size: 16px;\n  line-height: 1.5;\n  &::placeholder {\n    opacity: 0.2;\n  }\n  &:focus,\n  &:active,\n  &:focus-visible {\n    outline: 0px solid #dadada;\n  }\n  @media screen and (min-width: 350px) {\n    width: 270px;\n  }\n  @media screen and (min-width: 1512px) {\n    width: 330px;\n  }\n`;\n\nexport const StyledLabel = styled.label`\n  color: var(--light-color);\n  font-size: 16px;\n  line-height: 1.5;\n  position: absolute;\n  z-index: 9;\n  left: 48px;\n  top: -12px;\n`;\n\nexport const StyledBorder = styled.div`\n  background-color: var(--primary-color);\n  height: 1px;\n  width: 85px;\n  position: absolute;\n  z-index: 5;\n  left: 42px;\n  top: 0;\n`;\n\nexport const StyledBorderNumber = styled.div`\n  background-color: var(--primary-color);\n  height: 2px;\n  width: 138px;\n  position: absolute;\n  z-index: 5;\n  left: 42px;\n  top: 0;\n`;\n\nexport const StyledSvg = styled.svg`\n  position: absolute;\n  top: 20px;\n  left: 36px;\n`;\n\nexport const StyledSubmitDiv = styled.div`\n  display: flex;\n  flex-direction: column-reverse;\n  align-items: center;\n  gap: 20px;\n`;\n\nexport const StyledButton = styled.button`\n  display: flex;\n  max-width: 330px;\n  height: 60px;\n  justify-content: center;\n  align-items: center;\n  color: var(--light-color);\n  text-align: center;\n  font-weight: 500;\n  line-height: 1.5;\n  text-transform: uppercase;\n  background: linear-gradient(95deg, #fdc70d 0%, #fdab0d 100%);\n  box-shadow: 0px 24px 50px -20px #fdab0d;\n  border-radius: 500px;\n  @media screen and (min-width: 350px) {\n    width: 330px;\n  }\n  @media screen and (min-width: 1512px) {\n    transition: all 250ms var(--animation-cubic);\n    &:hover,\n    &:focus {\n      background: linear-gradient(95deg, #fdab0d 0%, #fdc70d 100%);\n      box-shadow: 0px 24px 20px -20px #fdab0d;\n    }\n  }\n`;\n\nconst fadeIn = keyframes`\n0% {\n  opacity: 0;\n}\n50% {\n  opacity: 0.2;\n}\n100% {\n  opacity: 1;\n}\n`;\n\nexport const StyledSubmittedButton = styled.div`\n  display: flex;\n  max-width: 330px;\n  height: 60px;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  background-color: rgba(49, 176, 4, 1);\n  border-radius: 500px;\n  animation: ${fadeIn} 500ms var(--animation-cubic);\n  @media screen and (min-width: 350px) {\n    width: 330px;\n  }\n`;\n\nexport const StyledSubmittedSpan = styled.span`\n  color: var(--light-color);\n  line-height: 1.5;\n  font-size: 18px;\n  font-weight: 500;\n  text-transform: uppercase;\n`;\n\nexport const StyledSubmittedP = styled.p`\n  display: flex;\n  flex-direction: column;\n  color: var(--light-color);\n  font-size: 14px;\n  line-height: 1.5;\n`;\n\nexport const StyledCheckboxField = styled(Field)`\n  appearance: none;\n  width: 18px;\n  height: 18px;\n  border-radius: 4px;\n  border: 1px solid #dadada;\n  background: var(--background-color);\n  &:checked {\n    background-image: url(${check});\n    background-repeat: no-repeat;\n    background-position: center;\n  }\n`;\n\nexport const StyledCheckboxLabel = styled.label`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  color: var(--grey-color);\n  font-size: 12px;\n  font-weight: 300;\n  line-height: 1.5;\n`;\n\nexport const StyledFlexDiv = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n  @media screen and (min-width: 768px) {\n    margin-top: 30px;\n  }\n  @media screen and (min-width: 1512px) {\n    margin-bottom: 30px;\n  }\n`;\n\nexport const StyledLineDiv = styled.div`\n  width: 2px;\n  height: 74px;\n  border-radius: 3px;\n  background: var(--accent-color);\n`;\n\nexport const StyledP = styled.p`\n  color: var(--light-color);\n  line-height: 1.5;\n`;\nexport const StyledLink = styled.a`\n  color: var(--accent-color);\n  font-size: 30px;\n  line-height: 1.5;\n`;\n","  export const formatPhoneNumber = (input) => {\n    const numbersOnly = input.replace(/\\D/g, '');\n    const formattedNumber = '+380 ' + numbersOnly.trim();\n\n    if (input.split(' ')[0] === '+380') {\n      const numbersOnly = input.split(' ').slice(1).join('').replace(/\\D/g, '');\n\n      if (numbersOnly.length <= 12) {\n        let formattedPhoneNumber = '+380 ';\n\n        if (numbersOnly.length <= 3) {\n          formattedPhoneNumber += numbersOnly;\n        }\n\n        if (numbersOnly.length > 3 && numbersOnly.length < 6) {\n          formattedPhoneNumber +=\n            numbersOnly.slice(0, 3) + ' ' + numbersOnly.slice(3, 6);\n        }\n\n        if (numbersOnly.length >= 6 && numbersOnly.length < 8) {\n          formattedPhoneNumber +=\n            numbersOnly.slice(0, 3) +\n            ' ' +\n            numbersOnly.slice(3, 5) +\n            ' ' +\n            numbersOnly.slice(5, 7);\n        }\n        if (numbersOnly.length >= 8) {\n          formattedPhoneNumber +=\n            numbersOnly.slice(0, 3) +\n            ' ' +\n            numbersOnly.slice(3, 5) +\n            ' ' +\n            numbersOnly.slice(5, 7) +\n            ' ' +\n            numbersOnly.slice(7, 9);\n        }\n\n        return formattedPhoneNumber;\n      }\n      return;\n    }\n\n    return formattedNumber\n  };\n"],"names":["Error","_ref","children","_jsx","style","color","fontSize","textAlign","marginTop","marginBottom","toLowerCase","schema","yup","shape","name","required","number","min","checkbox","_useTranslation","useTranslation","t","_slicedToArray","_useState","useState","_useState2","formSubmitted","setFormSubmitted","motion","initial","window","innerWidth","whileInView","viewport","amount","once","StyledBackGroundImage","_jsxs","StyledContainer","StyledBgImg","src","bg","alt","loading","StyledBgDesktopImg","variants","animation","as","StyledDiv","StyledCircleDiv","StyledH2","StyledH3","StyledFlexFormDesktopDiv","Formik","initialValues","validationSchema","onSubmit","_ref2","resetForm","_ref3","setFieldValue","Form","StyledFormDiv","StyledLabel","htmlFor","StyledBorder","StyledSvg","width","height","href","concat","sprite","StyledField","id","placeholder","autoComplete","ErrorMessage","component","StyledBorderNumber","type","onChange","e","formattedNumber","formatPhoneNumber","target","value","onFocus","StyledSubmitDiv","StyledCheckboxLabel","StyledCheckboxField","StyledButton","StyledSubmittedButton","StyledSubmittedP","StyledSubmittedSpan","StyledFlexDiv","animationRight","StyledLineDiv","StyledP","StyledLink","styled","_templateObject","_taggedTemplateLiteral","bg1x","bg2x","bg1xD","bg2xD","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","Field","_templateObject9","_templateObject10","_templateObject11","_templateObject12","_templateObject13","_templateObject14","_templateObject15","fadeIn","keyframes","_templateObject16","_templateObject17","_templateObject18","_templateObject19","_templateObject20","check","_templateObject21","_templateObject22","_templateObject23","_templateObject24","_templateObject25","input","replace","trim","split","numbersOnly","slice","join","length","formattedPhoneNumber"],"sourceRoot":""}