{"version":3,"file":"static/js/443.7da044b6.chunk.js","mappings":"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","sources":["components/Error.jsx","components/SectionForm/SectionForm.jsx","helpers/phoneUaInput.js"],"sourcesContent":["export const Error = ({ children }) => {\n  return (\n    <div\n      style={{\n        color: 'red',\n        fontSize: 14,\n        textAlign: 'center',\n        marginTop: '-20px',\n        marginBottom: '10px',\n      }}\n    >\n      {children.toLowerCase()}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Formik, ErrorMessage, Form } from 'formik';\nimport { motion } from 'framer-motion';\nimport * as yup from 'yup';\nimport { formatPhoneNumber } from 'helpers/phoneUaInput';\nimport { Error } from 'components/Error';\nimport {\n  StyledCircleDiv,\n  StyledContainer,\n} from 'components/SectionServices/SectionServices.styled';\nimport { animation } from '../Hero/Hero';\nimport { animationRight } from '../SectionCertifications/SectionCertifications';\nimport {\n  StyledBackGroundImage,\n  StyledBgImg,\n  StyledDiv,\n  StyledH2,\n  StyledH3,\n  StyledFormDiv,\n  StyledLabel,\n  StyledField,\n  StyledSubmitDiv,\n  StyledButton,\n  StyledBorder,\n  StyledBorderNumber,\n  StyledSvg,\n  StyledCheckboxLabel,\n  StyledCheckboxField,\n  StyledP,\n  StyledLink,\n  StyledLineDiv,\n  StyledFlexDiv,\n  StyledSubmittedButton,\n  StyledSubmittedSpan,\n  StyledSubmittedP,\n  StyledBgDesktopImg,\n  StyledFlexFormDesktopDiv,\n} from './SectionForm.styled';\nimport bg from '../../images/mobile/bg-circle.png';\nimport bgD from '../../images/desktop/bg-circle-right.png';\nimport sprite from '../../images/sprite.svg';\n\nconst schema = yup.object().shape({\n  name: yup.string().required('Please enter your name'),\n  number: yup\n    .string()\n    .min(10, 'Must be more than 10 characters')\n    .required(\"Please enter the phone's number\"),\n  checkbox: yup.boolean().required('Please check the checkbox to continue'),\n});\n\nconst SectionForm = () => {\n  const [t] = useTranslation();\n  const [formSubmitted, setFormSubmitted] = useState(false);\n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    setFormSubmitted(true);\n    // console.log(name, number);\n    // sending data\n    resetForm();\n  };\n\n  return (\n    <motion.section\n      initial={window.innerWidth >= 1512 ? 'hidden' : 'visible'}\n      whileInView=\"visible\"\n      viewport={{ amount: 0.7, once: true }}\n    >\n      <StyledBackGroundImage>\n        <StyledContainer>\n          <StyledBgImg src={bg} alt=\"background-circle\" loading=\"lazy\" />\n          <StyledBgDesktopImg\n            variants={animation}\n            as={motion.img}\n            src={bgD}\n            alt=\"background-circle\"\n            loading=\"lazy\"\n          />\n          <StyledDiv>\n            <StyledCircleDiv></StyledCircleDiv>\n            <StyledH2>{t('form.h2')}</StyledH2>\n          </StyledDiv>\n          <StyledH3>{t('form.h3')}</StyledH3>\n          <StyledFlexFormDesktopDiv>\n            <motion.div variants={animation}>\n              <Formik\n                initialValues={{ name: '', number: '', checkbox: false }}\n                validationSchema={schema}\n                onSubmit={handleSubmit}\n              >\n                {({ setFieldValue }) => (\n                  <Form>\n                    <StyledFormDiv>\n                      <StyledLabel htmlFor=\"name\">\n                        {t('form.labels.0')}{' '}\n                      </StyledLabel>\n                      <StyledBorder></StyledBorder>\n                      <StyledSvg width=\"22\" height=\"22\">\n                        <use href={`${sprite}#icon-address-book`}></use>\n                      </StyledSvg>\n                      <StyledField\n                        name=\"name\"\n                        id=\"name\"\n                        placeholder={t('form.placeholderName')}\n                        autoComplete=\"off\"\n                      />\n                      <ErrorMessage name=\"name\" component={Error} />\n                    </StyledFormDiv>\n\n                    <StyledFormDiv>\n                      <StyledLabel htmlFor=\"number\">\n                        {t('form.labels.1')}\n                      </StyledLabel>\n                      <StyledBorderNumber></StyledBorderNumber>\n                      <StyledSvg width=\"22\" height=\"22\">\n                        <use href={`${sprite}#icon-call-yellow-outline`}></use>\n                      </StyledSvg>\n                      <StyledField\n                        name=\"number\"\n                        id=\"number\"\n                        type=\"tel\"\n                        placeholder=\"+380 XXX XX XX XX\"\n                        autoComplete=\"off\"\n                        onChange={e => {\n                          const formattedNumber = formatPhoneNumber(\n                            e.target.value\n                          );\n                          setFieldValue('number', formattedNumber);\n                        }}\n                        onFocus={e => {\n                          if (!e.target.value) {\n                            setFieldValue('number', '+380 ');\n                          }\n                        }}\n                      />\n                      <ErrorMessage name=\"number\" component={Error} />\n                    </StyledFormDiv>\n\n                    <StyledSubmitDiv>\n                      <StyledCheckboxLabel>\n                        <StyledCheckboxField\n                          name=\"checkbox\"\n                          type=\"checkbox\"\n                          required\n                        />\n                        <ErrorMessage name=\"checkbox\" component={Error} />\n                        {t('form.checkboxText')}\n                      </StyledCheckboxLabel>\n                      {!formSubmitted && (\n                        <StyledButton type=\"submit\">\n                          {t('header.buttonText')}\n                        </StyledButton>\n                      )}\n                      {formSubmitted && (\n                        <StyledSubmittedButton>\n                          <StyledSubmittedP>\n                            <StyledSubmittedSpan>\n                              {t('form.buttonSubmittedText.0')}\n                            </StyledSubmittedSpan>\n                            {t('form.buttonSubmittedText.1')}\n                          </StyledSubmittedP>\n                        </StyledSubmittedButton>\n                      )}\n                    </StyledSubmitDiv>\n                  </Form>\n                )}\n              </Formik>\n            </motion.div>\n            <StyledFlexDiv as={motion.div} variants={animationRight}>\n              <StyledLineDiv></StyledLineDiv>\n              <div>\n                <StyledP>{t('form.p')}</StyledP>\n                <StyledLink href=\"tel:050 936 34 00\">050 936 34 00</StyledLink>\n              </div>\n            </StyledFlexDiv>\n          </StyledFlexFormDesktopDiv>\n        </StyledContainer>\n      </StyledBackGroundImage>\n    </motion.section>\n  );\n};\n\nexport default SectionForm;\n","  export const formatPhoneNumber = (input) => {\n    const numbersOnly = input.replace(/\\D/g, '');\n    const formattedNumber = '+380 ' + numbersOnly.trim();\n\n    if (input.split(' ')[0] === '+380') {\n      const numbersOnly = input.split(' ').slice(1).join('').replace(/\\D/g, '');\n\n      if (numbersOnly.length <= 12) {\n        let formattedPhoneNumber = '+380 ';\n\n        if (numbersOnly.length <= 3) {\n          formattedPhoneNumber += numbersOnly;\n        }\n\n        if (numbersOnly.length > 3 && numbersOnly.length < 6) {\n          formattedPhoneNumber +=\n            numbersOnly.slice(0, 3) + ' ' + numbersOnly.slice(3, 6);\n        }\n\n        if (numbersOnly.length >= 6 && numbersOnly.length < 8) {\n          formattedPhoneNumber +=\n            numbersOnly.slice(0, 3) +\n            ' ' +\n            numbersOnly.slice(3, 5) +\n            ' ' +\n            numbersOnly.slice(5, 7);\n        }\n        if (numbersOnly.length >= 8) {\n          formattedPhoneNumber +=\n            numbersOnly.slice(0, 3) +\n            ' ' +\n            numbersOnly.slice(3, 5) +\n            ' ' +\n            numbersOnly.slice(5, 7) +\n            ' ' +\n            numbersOnly.slice(7, 9);\n        }\n\n        return formattedPhoneNumber;\n      }\n      return;\n    }\n\n    return formattedNumber\n  };\n"],"names":["Error","_ref","children","_jsx","style","color","fontSize","textAlign","marginTop","marginBottom","toLowerCase","schema","yup","shape","name","required","number","min","checkbox","_useTranslation","useTranslation","t","_slicedToArray","_useState","useState","_useState2","formSubmitted","setFormSubmitted","motion","initial","window","innerWidth","whileInView","viewport","amount","once","StyledBackGroundImage","_jsxs","StyledContainer","StyledBgImg","src","bg","alt","loading","StyledBgDesktopImg","variants","animation","as","StyledDiv","StyledCircleDiv","StyledH2","StyledH3","StyledFlexFormDesktopDiv","Formik","initialValues","validationSchema","onSubmit","_ref2","resetForm","_ref3","setFieldValue","Form","StyledFormDiv","StyledLabel","htmlFor","StyledBorder","StyledSvg","width","height","href","concat","sprite","StyledField","id","placeholder","autoComplete","ErrorMessage","component","StyledBorderNumber","type","onChange","e","formattedNumber","formatPhoneNumber","target","value","onFocus","StyledSubmitDiv","StyledCheckboxLabel","StyledCheckboxField","StyledButton","StyledSubmittedButton","StyledSubmittedP","StyledSubmittedSpan","StyledFlexDiv","animationRight","StyledLineDiv","StyledP","StyledLink","input","replace","trim","split","numbersOnly","slice","join","length","formattedPhoneNumber"],"sourceRoot":""}